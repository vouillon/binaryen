;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --remove-unused-names --code-folding -all -S -o - \
;; RUN:   | filecheck %s

(module
  ;; CHECK:      (tag $e-i32 (param i32))
  (tag $e-i32 (param i32))


  ;; CHECK:      (func $foo (type $0)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  (func $foo)

  ;; CHECK:      (func $try-call-optimize-terminating-tails (type $2) (result i32)
  ;; CHECK-NEXT:  (block $folding-inner0
  ;; CHECK-NEXT:   (block
  ;; CHECK-NEXT:    (block $catch
  ;; CHECK-NEXT:     (try_table (catch_all $catch)
  ;; CHECK-NEXT:      (br $folding-inner0)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (br $folding-inner0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (call $foo)
  ;; CHECK-NEXT:  (call $foo)
  ;; CHECK-NEXT:  (call $foo)
  ;; CHECK-NEXT:  (call $foo)
  ;; CHECK-NEXT:  (return
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $try-call-optimize-terminating-tails (result i32)
    (try_table $catch (catch_all $catch)
      ;; Expressions that can throw should NOT be taken out of 'try' scope.
      (call $foo)
      (call $foo)
      (call $foo)
      (call $foo)
      (return (i32.const 0))
    )
    (call $foo)
    (call $foo)
    (call $foo)
    (call $foo)
    (return (i32.const 0))
  )

  ;; CHECK:      (func $try-call-optimize-expression-tails (type $0)
  ;; CHECK-NEXT:  (block $x
  ;; CHECK-NEXT:   (block
  ;; CHECK-NEXT:    (block $catch
  ;; CHECK-NEXT:     (try_table (catch_all $catch)
  ;; CHECK-NEXT:      (br $x)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (br $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (unreachable)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (call $foo)
  ;; CHECK-NEXT:  (call $foo)
  ;; CHECK-NEXT:  (call $foo)
  ;; CHECK-NEXT: )
  (func $try-call-optimize-expression-tails
    (block $x
      (block
        (try_table $catch (catch_all $catch)
          ;; Expressions that can throw should NOT be taken out of 'try' scope.
          (call $foo)
          (call $foo)
          (call $foo)
          (br $x)
        )
        (call $foo)
        (call $foo)
        (call $foo)
        (br $x)
      )
      (unreachable)
    )
  )
)
